module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
    
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){  //clock and rst not really required in each individual Source.
      alu_combined alu;
      alu_auto_tester auto_test;
      counter clock;
    }
  }  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led[7:4] = 0;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led[1] = 8h00;    // turn LEDs off
    io_led[2] = 8b0;
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits

    //manual testing using alu_combined
    alu.a = io_dip[1];
    alu.b = io_dip[0];
    alu.alu_fn = io_dip[2][5:0];
    io_led[2] = alu.alu; //8 bit output of function
    io_led[1][2] = alu.z;
    io_led[1][1] = alu.v;
    io_led[1][0] = alu.n;
    io_led[1][7] = alu.error; //if this led lights up it's an unknown alu_fn
    //7 segment showing what alu_fn you're on? Add/Bool/CPr/ShF
    //error code for invalid alu_fn input?
  //  auto_test.step = 0;
 //   if(clock.clock == 1){
      auto_test.step = 1;
      led[3:0] = auto_test.correct;
      io_led[0] = auto_test.progress;
//    }

  }
}